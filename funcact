/* activation functions

// Activation function
// Function sigmoid
/* Sigmoid
 * source_variable  Input   Input  /
 * Return
 * activated output
 */
double sigmoid(double source_variable){
    return 1/(1+1/exp(source_variable));
}
/* 
 * Matrix::matrix_source    Input   Inputvector    /
 */
Matrix::matrix sigmoid(Matrix::matrix &matrix_source){
    Matrix::matrix mat_temp(matrix_source.get_line(), matrix_source.get_column());
    for(int i=0; i<mat_temp.get_line(); i++)
        for(int j=0; j<mat_temp.get_column(); j++)
            mat_temp[i][j] = sigmoid(matrix_source[i][j]);
    return mat_temp;
}
// Function sigmoid derivative
double sigmoid_derivative(double source_variable){
    return sigmoid(source_variable)*(1.0-sigmoid(source_variable));
}
Matrix::matrix sigmoid_derivative(Matrix::matrix &matrix_source){
    Matrix::matrix mat_temp(matrix_source.get_line(), matrix_source.get_column());
    for(int i=0; i<mat_temp.get_line(); i++)
        for(int j=0; j<mat_temp.get_column(); j++)
            mat_temp[i][j] = sigmoid_derivative(matrix_source[i][j]);
    return mat_temp;
}
// Function ReLU
double ReLU(double dSrc)
{
    if(dSrc < 0) return 0;
    else return dSrc;
}
Matrix::matrix ReLU(Matrix::matrix &vecSrc)
{
    Matrix::matrix vecAct(vecSrc.get_line(), vecSrc.get_column());
    for(auto i=0; i<vecSrc.get_line(); i++)
        for(auto j=0; j<vecSrc.get_column(); j++) vecAct[i][j] = ReLU(vecSrc[i][j]);
    return vecAct;
}
/* ReLU derivative
 * dSrc [Input] Signal value    -
 * Return
 * Activated output value
 */
double ReLU_derivative(double dSrc)
{
    if(dSrc < 0) return 0;
    else return 1;
}
/* vecSrc   [Input] Signal outout   -
 * Return
 * Activated output vector error
 */
Matrix::matrix ReLU_derivative(Matrix::matrix &vecSrc)
{
    Matrix::matrix vecDv(vecSrc.get_line(), vecSrc.get_column());
    for(auto i=0; i<vecSrc.get_line(); i++)
        for(auto j=0; j<vecSrc.get_column(); j++) vecDv[i][j] = ReLU_derivative(vecSrc[i][j]);
    return vecDv;
}
/*
 * sequence [Input] Signal output vector    -
 * Return
 * Acticvates oputput vector
 */
Matrix::matrix softmax(Matrix::matrix &sequence)
{
    Matrix::matrix ans(sequence.get_line(), sequence.get_column());
    double sum = 0;
    for(auto i=0; i<sequence.get_line(); i++)
        for(auto j=0; j<sequence.get_column(); j++)
            sum += exp(sequence[i][j]);
    for(auto i=0; i<sequence.get_line(); i++)
        for(auto j=0; j<sequence.get_column(); j++)
            ans[i][j] = exp(sequence[i][j]) / sum;
    return ans;
}
/* Softmax derivative
 * vecActOutput [Input] Activated output vector -
 * vecOrigin    [Input] Orignal vector          -
 * Return
 * Degenerated vector
 */
Matrix::matrix softmax_derivative(Matrix::matrix &vecActOutput, Matrix::matrix &vecOrigin)
{
    return vecActOutput - vecOrigin;
}
//tanh
Matrix::matrix tanh(Matrix::matrix &vecSigOutput)
{
    return sigmoid(vecSigOutput * 2) * 2 - 1;
}
double tanh_derivative(double &dPara)
{
    return (4*exp(2*dPara)) / power(exp(2*dPara)+1, 2);
}
// tanh derivative
Matrix::matrix tanh_derivative(Matrix::matrix &vecSigOutput)
{
    return Matrix::matrix::travel(vecSigOutput, tanh_derivative);
}