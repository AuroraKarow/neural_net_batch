#pragma once
#include <iostream>
#include <chrono>
#include <functional>
#include <cmath>
#include <string>
#include <random>

#define BASEALGO_BEGIN  namespace bagrt {
#define BASEALGO_END    }

#define IDX_ZERO    0
#define IDX_SGL     1
#define IDX_MAX     128

BASEALGO_BEGIN
double                      ref_zero = 0;
std::default_random_engine  rand_e;
BASEALGO_END

#include "bagrt.hpp"

bagrt::clock_timer<uint64_t>    clock_note;

#define CLOCK_BEGIN(LOG_ID)     clock_note.clock_begin(LOG_ID);
#define CLOCK_END(LOG_ID)       clock_note.clock_end(LOG_ID);
#define CLOCK_DURATION(LOG_ID)  clock_note.duration(LOG_ID)

#define THREAD_IDX(TD_IDX)      std::cout << '[' << TD_IDX << ']' << std::endl;
#define FRACTOR_RATE(NUM, DOM)  bagrt::num_rate(NUM, DOM)
#define CLEAR_LINE(LEN)         std::printf("\r%s", ('%'+std::to_string(LEN)+'s').c_str());
#define PRINT_ENTER             std::cout << std::endl;

template<typename _Ty> using set    =   bagrt::net_queue<_Ty>;
template<typename _Ty> using seq    =   bagrt::net_sequence<_Ty>;
template<typename _Ty> using vect_t =   set<set<_Ty>>;