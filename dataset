#include "csvio"
#include <string>

#define DATASET_BEGIN namespace dataset {
#define DATASET_END }

// Dataset namespace begin
DATASET_BEGIN

Matrix::matrix get_origin_vector(uint64_t lbl_no, uint64_t lbl_num)
{
    if(lbl_num)
    {
        Matrix::matrix origin(lbl_num, 1);
        origin[lbl_no][0] = 1;
        return origin;
    }
    else return Matrix::matrix();
}

// mnist

struct m_elem
{
    uint64_t label = 0;
    Matrix::matrix img;
    bool data_valid = true;
    m_elem(){}
    m_elem(uint64_t lbl, Matrix::matrix &img_q, bool valid = true)
    {
        label = lbl;
        img = img_q;
        data_valid = valid;
    }
    Matrix::matrix get_label_vector(uint64_t type_cnt)
    {
        Matrix::matrix lbl_vec(type_cnt, 1);
        lbl_vec[label][0] = 1;
        return lbl_vec;
    }
    m_elem operator=(m_elem &m_elem_val)
    {
        label = m_elem_val.label;
        img = m_elem_val.img;
        data_valid = m_elem_val.data_valid;
        return *this;
    }
    bool operator==(m_elem &m_elem_val)
    {
        return (m_elem_val.label==label && m_elem_val.img==img);
    }
    bool operator!=(m_elem &m_elem_val)
    {
        return !(*this==m_elem_val);
    }
    ~m_elem()
    {
        label = 0;
        img.~matrix();
        data_valid = true;
    }
};

struct mnist_stream
{
    std::ifstream img_stream;
    std::ifstream lbl_stream;
};
class mnist_set
{
private:
    // label and image I/O stream
    mnist_stream m_file;
    // size
    uint64_t items_cnt = 0;
    // image height
    uint64_t img_hgt = 0;
    // image width
    uint64_t img_wid = 0;
    // element size
    uint64_t img_size = 0;
    // image list with lable
    algo_queue<m_elem> data_vec;
    static void init_cnter(algo_queue<uint64_t> &counter)
    {
        for(auto i=0; i<10; i++) counter.emplace_back(0);
    }
    static bool is_counted(algo_queue<uint64_t> &lbl_amt, algo_queue<uint64_t> &counter)
    {
        if(counter.size() == lbl_amt.size())
        {
            for(auto i=0; i<counter.size(); i++)
                if(counter[i] == lbl_amt[i]) continue;
                else return false;
            return true;
        }
        else return false;
    }
public:
    // Magic number for validation
    static const uint64_t MAGIC_IMAGE_VALID = 2051;
    static const uint64_t MAGIC_LABEL_VALID = 2049;
    // Constructor
    mnist_set(){}
    uint64_t elem_cnt()
    {
        return img_size;
    }
    uint64_t height()
    {
        return img_hgt;
    }
    uint64_t weight()
    {
        return img_wid;
    }
    uint64_t size()
    {
        return items_cnt;
    }
    m_elem operator[](uint64_t num)
    {
        if(num < items_cnt) return data_vec[num];
        else return m_elem();
    }
    /* .first   image stream
     * .second  label stream
     */
    static mnist_stream open_stream(std::string &img_dir, std::string &lbl_dir)
    {
        mnist_stream file_stream;
        file_stream.img_stream = std::ifstream(img_dir, std::ios::in | std::ios::binary);
	    file_stream.lbl_stream = std::ifstream(lbl_dir, std::ios::in | std::ios::binary);
        return file_stream;
    }
    static bool is_set_opened(mnist_stream &file_stream)
    {
        return (file_stream.img_stream.is_open() && file_stream.lbl_stream.is_open());
    }
    static void close_stream(mnist_stream &file_stream)
    {
        file_stream.img_stream.close();
        file_stream.lbl_stream.close();
    }
    static bool magic_valid(mnist_stream &file_stream)
    {
        // validation magic number
        uint32_t magic = 0;
        // image
        file_stream.img_stream.read(reinterpret_cast<char*>(&magic), 4);
        magic = swap_endian(magic);
        if (magic != MAGIC_IMAGE_VALID) return false;
        // label
        file_stream.lbl_stream.read(reinterpret_cast<char*>(&magic), 4);
        magic = swap_endian(magic);
        if (magic != MAGIC_LABEL_VALID) return false;
        return true;
    }
    static uint64_t get_data_cnt(mnist_stream &file_stream)
    {
        // data quantity count
        uint32_t img_cnt = 0, lbl_cnt = 0;
        file_stream.img_stream.read(reinterpret_cast<char*>(&img_cnt), 4);
        img_cnt = swap_endian(img_cnt);
        file_stream.lbl_stream.read(reinterpret_cast<char*>(&lbl_cnt), 4);
        lbl_cnt = swap_endian(lbl_cnt);
        if(img_cnt == lbl_cnt) return lbl_cnt;
        else return 0;
    }
    /* .first   image height
     * .second  image width
     */
    static std::pair<uint64_t, uint64_t> get_elem_size(mnist_stream &file_stream)
    {
        // image size
        uint32_t img_height = 0, img_width = 0;
        file_stream.img_stream.read(reinterpret_cast<char*>(&img_height), 4);
        img_height = swap_endian(img_height);
        file_stream.img_stream.read(reinterpret_cast<char*>(&img_width), 4);
        img_width = swap_endian(img_width);
        return std::make_pair(img_height, img_width);
    }
    static std::pair<uint64_t, Matrix::matrix> read_img(mnist_stream &ifile_stream, uint64_t img_height, uint64_t img_width, bool to_bool = false)
    {
        // image
        auto elem_cnt = img_height * img_width;
        auto vec_ptr = std::make_unique<double[]>(elem_cnt);
        char *img_ptr = new char[elem_cnt];
        ifile_stream.img_stream.read(img_ptr, elem_cnt);
        for(auto i=0; i<elem_cnt; i++)
            if(to_bool && img_ptr[i]) vec_ptr[i] = true;
            else vec_ptr[i] = img_ptr[i];
        // label
        char label = 0;
        ifile_stream.lbl_stream.read(&label, 1);
        uint64_t vec_lbl = (uint64_t)label;
        Matrix::matrix img_vec(vec_ptr, img_height, img_width);
        delete []img_ptr;
        img_ptr = nullptr;
        return std::make_pair(vec_lbl, img_vec);
    }
    static algo_queue<m_elem> read_img(mnist_stream &file_stream, uint64_t img_height, uint64_t img_width, uint64_t img_amt, uint64_t data_cnt, bool to_bool = false)
    {
        if(img_amt)
        {
            algo_queue<m_elem> img_seq(img_amt);
            algo_queue<int> node_rand;
            for(auto i=0; i<img_amt; i++) node_rand.emplace_back((int)random_number(0, data_cnt - 1));
            node_rand.sort();
            auto node_cnt = 0;
            for(auto i=0; i<data_cnt; i++)
            {
                auto lbl_img = read_img(file_stream, img_height, img_width, to_bool);
                if(node_rand[node_cnt] == i)
                {
                    img_seq[node_cnt] = m_elem(lbl_img.first, lbl_img.second);
                    node_cnt ++;
                }
                if(node_cnt == node_rand.size()) break;
            }
            return img_seq;
        }
        else
        {
            algo_queue<m_elem> img_seq(data_cnt);
            for(auto i=0; i<data_cnt; i++)
            {
                auto lbl_img = read_img(file_stream, img_height, img_width, to_bool);
                img_seq[i] = m_elem(lbl_img.first, lbl_img.second);
            }
            return img_seq;
        }
    }
    static algo_queue<m_elem> read_img(mnist_stream &file_stream, uint64_t img_height, uint64_t img_width, algo_queue<uint64_t>&lbl_amt, uint64_t data_cnt, bool to_bool = false)
    {
        algo_queue<m_elem> img_seq;
        algo_queue<uint64_t> counter;
        init_cnter(counter);
        for(auto i=0; i<data_cnt; i++)
        {
            auto lbl_img = read_img(file_stream, img_height, img_width, to_bool);
            if(counter[lbl_img.first] < lbl_amt[lbl_img.first])
            {
                img_seq.emplace_back(m_elem(lbl_img.first, lbl_img.second));
                counter[lbl_img.first] ++;
            }
            if(is_counted(lbl_amt, counter)) break;
        }
        return img_seq;
    }
    bool import_data(std::string &img_dir, std::string &lbl_dir, uint64_t img_amt = 0, bool to_bool = false)
    {
        m_file = open_stream(img_dir, lbl_dir);
        if(is_set_opened(m_file) && magic_valid(m_file))
        {
            auto data_cnt = get_data_cnt(m_file);
            if(img_amt) items_cnt = img_amt;
            else items_cnt = data_cnt;
            auto items_size = get_elem_size(m_file);
            img_hgt = items_size.first;
            img_wid = items_size.second;
            img_size = img_hgt * img_wid;
            data_vec = read_img(m_file, img_hgt, img_wid, img_amt, data_cnt, to_bool);
            close_stream(m_file);
            return true;
        }
        else
        {
            close_stream(m_file);
            return false;
        }
    }
    bool import_data(std::string &img_dir, std::string &lbl_dir, algo_queue<uint64_t> &lbl_amt, bool to_bool = false)
    {
        m_file = open_stream(img_dir, lbl_dir);
        if(is_set_opened(m_file) && magic_valid(m_file))
        {
            auto data_cnt = get_data_cnt(m_file);
            auto items_size = get_elem_size(m_file);
            img_hgt = items_size.first;
            img_wid = items_size.second;
            img_size = img_hgt * img_wid;
            data_vec = read_img(m_file, img_hgt, img_wid, lbl_amt, data_cnt, to_bool);
            items_cnt = data_vec.size();
            close_stream(m_file);
            return true;
        }
        else
        {
            close_stream(m_file);
            return false;
        }
    }
    // Constructor
    mnist_set(std::string img_dir, std::string lbl_dir, bool to_bool = false, uint64_t img_amt = 0)
    {
        if(!import_data(img_dir, lbl_dir, img_amt, to_bool) || data_vec.size()!=items_cnt) throw std::logic_error("File exception");
    }
    mnist_set(std::string img_dir, std::string lbl_dir, algo_queue<uint64_t> &lbl_amt, bool to_bool = false)
    {
        if(!import_data(img_dir, lbl_dir, lbl_amt, to_bool) || data_vec.size()!=items_cnt) throw std::logic_error("File exception");
    }
    bool output_img(std::string dest_dir)
    {
        auto cnt = 0;
        for(auto i=0; i<data_vec.size(); i++)
        {
            auto name = '[' + std::to_string(data_vec[i].label) + ']' + std::to_string(cnt++);
            imgdig::ImgPx img;
            img.AddChannel(data_vec[i].img, data_vec[i].img, data_vec[i].img);
            if(!imgdig::SaveImg(dest_dir, name, img)) return false;
        }
        return true;
    }
    static uint64_t get_label(Matrix::matrix origin)
    {
        for(auto i=0; i<origin.get_line(); i++) if(origin[i][0]) return i;
        return 0;
    }
    bool output_img(std::wstring dest_dir)
    {
        return output_img(charset_exchange(dest_dir));
    }
    bool dropout(uint64_t num)
    {
        if(num < items_cnt)
        {
            data_vec[num].data_valid = false;
            return true;
        }
        else return false;
    }
    bool clear()
    {
        if(data_vec.size())
        {
            items_cnt = 0;
            img_hgt = 0;
            img_wid = 0;
            data_vec.clear();
            return true;
        }
        else return false;
    }
    ~mnist_set()
    {
        clear();
    }
};

// SUOD

struct SUOD_lbl_stat
{
    std::string lbl_name = "";
    uint64_t cnt = 0;
};
struct SUOD_data_stat
{
    std::string lbl_name = "";
    algo_queue<algo_queue<double>> pt_cloud;
};
class SUOD_set
{
private:
    algo_queue<SUOD_data_stat> pt_set;
public:
    // axis loaction
    static const uint64_t X = 0;
    static const uint64_t Y = 0;
    static const uint64_t Z = 0;
    // SUOD dimension space
    static const uint64_t DIMENSION = 3;
    uint64_t size()
    {
        return pt_set.size();
    }
    SUOD_set(){}
    bool load_data(std::string &dir_root, algo_queue<SUOD_lbl_stat> &lbl_set)
    {
        pt_set.init(lbl_set.size());
        for(auto i=0; i<lbl_set.size(); i++) for(auto j=0; j<lbl_set[i].cnt; j++)
        {
            auto raw_temp = csvio::input_table(dir_root + lbl_set[i].lbl_name + std::to_string(j));
            if(raw_temp.size())
            {
                // read label
                pt_set[i].lbl_name = lbl_set[i].lbl_name;
                // read point cloud
                pt_set[i].pt_cloud.init(raw_temp.size());
                for(auto k=0; k<raw_temp.size(); k++) if(raw_temp[k].size())
                {
                    pt_set[i].pt_cloud[k].init(DIMENSION);
                    pt_set[i].pt_cloud[k][X] = std::stof(raw_temp[k][3]);
                    pt_set[i].pt_cloud[k][Y] = std::stof(raw_temp[k][4]);
                    pt_set[i].pt_cloud[k][Z] = std::stof(raw_temp[k][5]);
                }
                else
                {
                    pt_set.clear();
                    return false;
                }
                return true;
            }
            else
            {
                pt_set.clear();
                return false;
            }
        }
    }
    SUOD_set(std::string &dir_root, algo_queue<SUOD_lbl_stat> &lbl_set)
    {
        if(!load_data(dir_root, lbl_set)) throw std::logic_error("Load data failed.");
    }
    SUOD_data_stat operator[](uint64_t idx)
    {
        return pt_set[idx];
    }
    void clear()
    {
        for(auto i=0; i<pt_set.size(); i++)
        {
            pt_set[i].lbl_name.clear();
            pt_set[i].pt_cloud.clear();
        }
        pt_set.clear();
    }
    ~SUOD_set()
    {
        clear();
    }
};

//Dataset namespace end
DATASET_END
