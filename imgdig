/* C++ MSVC graphical analysis
 * Ver 0.0.1
 * Author Liao 
 */
#pragma once
// Static library
#pragma comment(lib, "gdiplus.lib")
#include <comdef.h>
// MS WinAPI
#include <gdiplus.h>
#define IMG_DIG_BEGIN namespace imgdig{
#define IMG_DIG_END }

IMG_DIG_BEGIN

// Color enumeration
const uint64_t R = 0;
const uint64_t G = 1;
const uint64_t B = 2;

// Gray
const double RED_GRAY_WEIGHT = 0.299;
const double GREEN_GRAY_WEIGHT = 0.587;
const double BLUE_GRAY_WEIGHT = 0.114;

// Channel
const uint64_t RGB_CHANNEL_COUNT = 3;

// Picture
struct ImgPx{
	// Height and width
	uint64_t nHeight = 0;
	uint64_t nWidth = 0;
	// Pixel Matrix::matrix
	algo_queue<Matrix::matrix> mapImgCh;
	uint64_t nChCnt = 0;
	// Add image channel
	bool AddChannel(){
		return true;
	}
	bool AddChannel(Matrix::matrix &vecImg)
	{
		if(nChCnt) if(!mapImgCh[nChCnt - 1].shape_examin(vecImg)) return false;
		if(!(nHeight&&nWidth))
		{
			nHeight = vecImg.get_line();
			nWidth = vecImg.get_column();
		}
		mapImgCh.emplace_back(vecImg);
		nChCnt ++;
		return true;
	}
	// Add image channels
	template<typename VEC, typename ... VECS> bool AddChannel(VEC &vecChannel, VECS& ... vecChannels)
	{
		return AddChannel(vecChannel) && AddChannel(vecChannels ...);
	}
	// Construction function
	ImgPx(){}
	ImgPx(Matrix::matrix &vec_input)
	{
		if(!AddChannel(vec_input)) throw std::logic_error("Add channel exception.");
	}
	Matrix::matrix ToGray()
	{
		Matrix::matrix vecGreyImg;
		if(mapImgCh.size() == 3)
		{
			vecGreyImg = mapImgCh[R]*0.299 + mapImgCh[G]*0.578 + mapImgCh[B]*0.114;
			return vecGreyImg;
		}
		else return vecGreyImg;
	}
	static Matrix::matrix ToGray(ImgPx &imgSrc)
	{
		return imgSrc.ToGray();
	}
	// Destruction function
	~ImgPx(){}
};

// Bit image procedure prototype
ImgPx _get_image_bit_matrix(std::wstring directory_path_string)
{
	// Image input stream
	Gdiplus::GdiplusStartupInput stGph;
	// Stream token
	ULONG_PTR pGphToken;
	// Input startup by token pointer and input&output stream pointer;
	Gdiplus::GdiplusStartup(&pGphToken, &stGph, nullptr);
	// Load image pointer
	Gdiplus::Bitmap *mapPtr = new Gdiplus::Bitmap(directory_path_string.c_str());
	// Image pixel Matrix::matrix
	ImgPx tempImgPx;
	tempImgPx.nHeight = mapPtr->GetHeight();
	tempImgPx.nWidth = mapPtr->GetWidth();
	Matrix::matrix vecRed(tempImgPx.nHeight, tempImgPx.nWidth),
		vecGreen(tempImgPx.nHeight, tempImgPx.nWidth),
		vecBlue(tempImgPx.nHeight, tempImgPx.nWidth);
	for(uint64_t i=0; i<tempImgPx.nHeight; i++)
		for(uint64_t j=0; j<tempImgPx.nWidth; j++)
		{	
			// Get image's single RGB
			Gdiplus::Color color;
			mapPtr->GetPixel(j, i, &color);
			vecRed[i][j] = color.GetRed();
			vecGreen[i][j] = color.GetGreen();
			vecBlue[i][j] = color.GetBlue();
		}
	tempImgPx.AddChannel(vecRed, vecGreen, vecBlue);
	// Close stream
	delete mapPtr;
	mapPtr = nullptr;
	Gdiplus::GdiplusShutdown(pGphToken);
	return tempImgPx;
}
// Get bit image and transfer to Matrix::matrix in RGB format
ImgPx GetImgBitMat(std::string DirPathStr)
{
	return _get_image_bit_matrix(charset_exchange(DirPathStr));
}
ImgPx GetImgBitMat(std::wstring DirPathStr)
{
	return _get_image_bit_matrix(DirPathStr.c_str());
}

// Save image
bool _save_image_bit(ImgPx imgSrc, std::string directory_path_string, uint64_t bit_cnt = 24)
{
	FILE *file = fopen(directory_path_string.c_str(), "wb");  
    if (!file) return false;

	BITMAPFILEHEADER bfh;
	BITMAPINFOHEADER bih;
	auto width = imgSrc.nWidth, height = imgSrc.nHeight;
	auto bmp_size = width * height * (bit_cnt / 8);

	bfh.bfType = 0x4d42;
	bfh.bfReserved1 = 0;
	bfh.bfReserved2 = 0;
	bfh.bfSize = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER)+ bmp_size;
	bfh.bfOffBits = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);
	fwrite(&bfh, sizeof(bfh), 1, file);

	bih.biSize = sizeof(bih);
	bih.biWidth = width;
	bih.biHeight = height;
	bih.biPlanes = 1;
	bih.biBitCount = 24;
	bih.biCompression = 0;
	bih.biSizeImage = width * height * 3;
	bih.biXPelsPerMeter = 0;
	bih.biYPelsPerMeter = 0;
	bih.biClrUsed = 0;
	bih.biClrImportant = 0;  
    fwrite(&bih, sizeof(bih), 1, file);  
	
	auto test_cnt = 0;
    for(auto i=height; i>0; i--)
		for(auto j=0; j<width; j++)
		{
			u_char rgb_g = imgSrc.mapImgCh[G][i-1][j];
			u_char rgb_b = imgSrc.mapImgCh[B][i-1][j];
			u_char rgb_r = imgSrc.mapImgCh[R][i-1][j];
			fwrite(&rgb_g, 1, 1, file);
			fwrite(&rgb_b, 1, 1, file);			
			fwrite(&rgb_r, 1, 1, file);
		}
    fclose(file);
	return true;
}
// Save image
bool SaveImg(std::string strSaveDir, std::string strFileName, ImgPx imgSrc)
{
	return _save_image_bit(imgSrc, strSaveDir + '/'+strFileName + ".bmp");
}
bool SaveImg(std::wstring strSaveDir, std::wstring strFileName, ImgPx imgSrc)
{
	return _save_image_bit(imgSrc, charset_exchange(strSaveDir+L'/'+strFileName+L".bmp"));
}
IMG_DIG_END